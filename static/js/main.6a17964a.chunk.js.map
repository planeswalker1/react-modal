{"version":3,"sources":["components/UI/Modal/Modal.module.css","containers/Home/Home.module.css","components/UI/Backdrop/Backdrop.module.css","hoc/Auxillary.js","components/Layout/Layout.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","components/ModalSummary/ModalSummary.js","containers/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","Modal--animate","Button","Backdrop","aux","props","children","layout","react_default","a","createElement","Auxillary","backdrop","show","className","classes","onClick","hide","modal","modalClass","isModalShown","hideModal","join","summary","style","textAlign","role","aria-label","Home","state","hideModalHandler","_this","setState","showModalHandler","this","ModalSummary","Component","App","Layout","containers_Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EACAA,EAAAC,QAAA,CAAkBC,MAAA,qBAAAC,iBAAA,kDCAlBH,EAAAC,QAAA,CAAkBG,OAAA,uCCAlBJ,EAAAC,QAAA,CAAkBI,SAAA,wMCCHC,EAFH,SAACC,GAAD,OAAWA,EAAMC,UCedC,EAXA,SAACF,GACd,OACEG,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,YACGL,EAAMC,6DCFAM,EAJE,SAACP,GAAD,OACfA,EAAMQ,KAAOL,EAAAC,EAAAC,cAAA,OAAKI,UAAWC,IAAQZ,SAAUa,QAASX,EAAMY,OAAe,MCqBhEC,EAnBD,SAACb,GACb,IAAIc,EAAa,GAKjB,OAJId,EAAMe,eACRD,EAAaJ,IAAQ,mBAIrBP,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACP,EAAD,CACEU,KAAMR,EAAMe,aACZH,KAAMZ,EAAMgB,YAEdb,EAAAC,EAAAC,cAAA,OAAKI,UAAW,CAACC,IAAQf,MAAOmB,GAAYG,KAAK,MAC9CjB,EAAMC,YCJAiB,EAZC,SAAClB,GAAD,OACdG,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAAA,MAAIc,MAAO,CAAEC,UAAW,WAAxB,kBAEEjB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMgB,KAAK,MAAMC,aAAW,gCAA5B,gBACAnB,EAAAC,EAAAC,cAAA,QAAMgB,KAAK,MAAMC,aAAW,gCAA5B,gBACAnB,EAAAC,EAAAC,cAAA,QAAMgB,KAAK,MAAMC,aAAW,gCAA5B,mBC6BSC,6MA/BbC,MAAQ,CACNT,cAAc,KAGhBU,iBAAmB,WACjBC,EAAKC,SAAS,CACZZ,cAAc,OAIlBa,iBAAmB,WACjBF,EAAKC,SAAS,CACZZ,cAAc,6EAKhB,OACEZ,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACV,EAAD,CACEoB,aAAcc,KAAKL,MAAMT,aACzBC,UAAWa,KAAKJ,kBAEhBtB,EAAAC,EAAAC,cAACyB,EAAD,OAEF3B,EAAAC,EAAAC,cAAA,UAAQI,UAAWC,IAAQb,OAAQc,QAASkB,KAAKD,kBAAjD,sBA1BWG,aCQJC,mLARX,OACE7B,EAAAC,EAAAC,cAAC4B,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,cAJUH,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a17964a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__2txu_\",\"Modal--animate\":\"Modal_Modal--animate__2BAOs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Home_Button__3rUlj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3j6to\"};","const aux = (props) => props.children;\r\n\r\nexport default aux;","import React from 'react';\r\n\r\nimport Aux from '../../hoc/Auxillary';\r\n\r\nconst layout = (props) => {\r\n  return (\r\n    <Aux>\r\n      <p>Click on this modal</p>\r\n      <main>\r\n        {props.children}\r\n      </main>\r\n    </Aux>\r\n  );\r\n}\r\n\r\nexport default layout;","import React from 'react';\r\nimport classes from './Backdrop.module.css';\r\n\r\nconst backdrop = (props) => (\r\n  props.show ? <div className={classes.Backdrop} onClick={props.hide}></div> : null\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\nimport classes from './Modal.module.css';\r\n\r\nimport Aux from '../../../hoc/Auxillary';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nconst modal = (props) => {\r\n  let modalClass = '';\r\n  if (props.isModalShown) {\r\n    modalClass = classes['Modal--animate'];\r\n  }\r\n\r\n  return (\r\n    <Aux>\r\n      <Backdrop\r\n        show={props.isModalShown}\r\n        hide={props.hideModal}\r\n      />\r\n      <div className={[classes.Modal, modalClass].join(' ')}>\r\n        {props.children}\r\n      </div>\r\n    </Aux>\r\n  );\r\n}\r\n\r\nexport default modal;","import React from 'react';\r\nimport Aux from '../../hoc/Auxillary';\r\n\r\nconst summary = (props) => (\r\n  <Aux>\r\n    <h1 style={{ textAlign: 'center' }}>\r\n      Very Cool Modal\r\n      <br />\r\n      <span role='img' aria-label='Smiling Face With Sunglasses'>ðŸ˜Ž</span>\r\n      <span role='img' aria-label='Smiling Face With Sunglasses'>ðŸ˜Ž</span>\r\n      <span role='img' aria-label='Smiling Face With Sunglasses'>ðŸ˜Ž</span>\r\n    </h1>\r\n  </Aux>\r\n);\r\n\r\nexport default summary;","import React, {Component} from 'react';\r\nimport classes from './Home.module.css';\r\n\r\nimport Aux from '../../hoc/Auxillary';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport ModalSummary from '../../components/ModalSummary/ModalSummary';\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    isModalShown: false\r\n  }\r\n  \r\n  hideModalHandler = () => {\r\n    this.setState({\r\n      isModalShown: false\r\n    });\r\n  }\r\n\r\n  showModalHandler = () => {\r\n    this.setState({\r\n      isModalShown: true\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <Aux>\r\n        <Modal\r\n          isModalShown={this.state.isModalShown}\r\n          hideModal={this.hideModalHandler}\r\n        >\r\n          <ModalSummary />\r\n        </Modal>\r\n        <button className={classes.Button} onClick={this.showModalHandler}>Show Modal</button>\r\n      </Aux>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\n\nimport Layout from './components/Layout/Layout';\nimport Home from './containers/Home/Home';\n\nclass App extends Component {\n  render () {\n    return (\n      <Layout>\n        <Home />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}